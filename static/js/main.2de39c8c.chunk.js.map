{"version":3,"sources":["pages/HomePage.js","pages/GameMenu.js","pages/Settings.js","utils/quiz.js","pages/Quiz.js","utils/typing.js","hooks/useKeyPress.js","pages/Typing.js","utils/time.js","App.js","serviceWorker.js","index.js"],"names":["HomePage","Fragment","className","id","to","style","textDecoration","color","GameMenu","pointerEvents","display","Settings","quizQuestions","random","arr","Math","floor","length","promptList","count","quizList","Object","keys","Array","fill","map","_","generate","console","log","Quiz","useState","score","index","setIndex","prompt","setPrompt","sort","options","setOptions","isCorrect","setIsCorrect","checkAnswer","option","onClick","hiraganaToRomaji","useKeyPress","callback","keyPressed","setKeyPressed","useEffect","downHandler","key","upHandler","window","addEventListener","removeEventListener","japaneseList","hiraganaList","japaneseString","join","maxAcceptedLength","romanjiContainer","isDone","reset","location","reload","Typing","leftPadding","setLeftPadding","outgoingChars","setOutgoingChars","currentChar","setCurrentChar","substr","incomingChars","setIncomingChars","startTime","setStartTime","setScore","typedText","setTypedText","Date","getTime","slice","updatedOutgoingChars","updatedIncomingChars","romanjiList","i","substring","App","path","component","exact","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"mWAceA,G,MAVE,kBACb,kBAAC,IAAMC,SAAP,KACI,yBAAKC,UAAU,aACX,wBAAIC,GAAG,aAAP,YACA,iEACA,kBAAC,IAAD,CAAMC,GAAG,YAAYC,MAAO,CAACC,eAAgB,OAAQC,MAAO,UAAU,4BAAQJ,GAAG,gBAAX,oBCSnEK,G,MAdE,kBACb,kBAAC,IAAMP,SAAP,KACI,yBAAKC,UAAU,aACX,wCACA,4BACI,kBAAC,IAAD,CAAME,GAAG,QAAQC,MAAO,CAACC,eAAgB,OAAQC,MAAO,QAASE,cAAe,SAAS,yDACzF,kBAAC,IAAD,CAAML,GAAG,UAAUC,MAAO,CAACC,eAAgB,OAAQC,MAAO,UAAU,0CACpE,kBAAC,IAAD,CAAMH,GAAG,YAAYC,MAAO,CAACC,eAAgB,OAAQC,MAAO,QAASG,QAAS,SAAS,yCACvF,kBAAC,IAAD,CAAMN,GAAG,IAAIC,MAAO,CAACC,eAAgB,OAAQC,MAAO,UAAU,0CCD/DI,G,MAPE,kBACb,kBAAC,IAAMV,SAAP,KACI,wBAAIE,GAAG,iBAAP,YACA,kBAAC,IAAD,CAAMC,GAAG,IAAIC,MAAO,CAACC,eAAgB,OAAQC,MAAO,UAAU,wC,OCPzDK,EAAgB,CACzB,8BAAU,CAAC,CAAC,QAAQ,SAAS,WAAW,0BAA0B,0BAClE,oCAAW,CAAC,CAAC,SAAS,UAAU,SAAS,WAAW,UACpD,0CAAY,CAAC,CAAC,QAAQ,QAAQ,QAAQ,QAAQ,UAGlD,SAASC,EAAOC,GACZ,OAAOA,EAAIC,KAAKC,MAAMD,KAAKF,SAASC,EAAIG,S,MAGrC,ICJDC,EDIkB,WAAgB,IAAfC,EAAc,uDAAN,EACzBC,EAAWC,OAAOC,KAAKV,GAE3B,OAAO,IAAIW,MAAMJ,GAAOK,OAAOC,KAAI,SAAAC,GAAC,OAAIb,EAAOO,MCPhCO,GAMnBC,QAAQC,IAAIX,GACZU,QAAQC,IAAIjB,GA4DGkB,MA1Df,WAAiB,IAAD,EACcC,mBAAS,GADvB,mBACLC,EADK,aAEcD,mBAAS,IAFvB,mBAELE,EAFK,KAEEC,EAFF,OAGgBH,mBAASb,EAAWe,IAHpC,mBAGLE,EAHK,KAGGC,EAHH,OAIkBL,mBAAiBnB,EAAcuB,GAAQ,GAV1DE,MAAK,kBAAMtB,KAAKF,SAAW,OAM1B,mBAILyB,EAJK,KAIIC,EAJJ,OAKsBR,oBAAS,GAL/B,mBAKLS,EALK,KAKMC,EALN,KAkBZ,SAASC,EAAYC,GACjBT,GAAUD,EAAM,GAAGf,EAAWD,QAC9BW,QAAQC,IAAI,UAAYI,GACxBG,EAAUlB,EAAWe,IACrBM,EAAW3B,EAAcuB,GAAQ,IACjCM,GAAa,GAWjB,OACI,kBAAC,IAAMxC,SAAP,KACI,yBAAKC,UAAU,kBACX,yBAAKA,UAAU,sBACX,wBAAIC,GAAG,iBAAiBqC,EAAW,oDAAwB,iEAC3D,wBAAIrC,GAAG,eAAegC,GACtB,yBAAKhC,GAAG,kBACJ,4BAAQD,UAAU,UAAU0C,QAAS,kBAAIF,EAAYJ,EAAQ,KAAKjC,MAAO,CAAC,gBAAmB,gBAAiBiC,EAAQ,IACtH,4BAAQpC,UAAU,UAAU0C,QAAS,kBAAIF,EAAYJ,EAAQ,KAAKjC,MAAO,CAAC,gBAAmB,SAAUiC,EAAQ,IAC/G,4BAAQpC,UAAU,UAAU0C,QAAS,kBAAIF,EAAYJ,EAAQ,KAAKjC,MAAO,CAAC,gBAAmB,WAAYiC,EAAQ,IACjH,4BAAQpC,UAAU,UAAU0C,QAAS,kBAAIF,EAAYJ,EAAQ,KAAKjC,MAAO,CAAC,gBAAmB,YAAaiC,EAAQ,KAEtH,uBAAGpC,UAAU,cAAb,UACY8B,IAGhB,yBAAK9B,UAAU,iBACX,kBAAC,IAAD,CAAME,GAAG,IAAIC,MAAO,CAACC,eAAgB,OAAQC,MAAO,UAAU,4BAAQL,UAAU,sBAAlB,aClErE2C,EAAmB,CAAC,SAAI,CAAC,KAAK,SAAI,CAAC,IAAI,MAAM,SAAI,CAAC,KAAK,SAAI,CAAC,KAAK,SAAI,CAAC,KAC3D,SAAI,CAAC,MAAM,SAAI,CAAC,MAAM,SAAI,CAAC,MAAM,SAAI,CAAC,MAAM,SAAI,CAAC,MACjD,eAAK,CAAC,OAAO,eAAK,CAAC,OAAO,eAAK,CAAC,OAChC,SAAI,CAAC,MAAM,SAAI,CAAC,MAAM,SAAI,CAAC,MAAM,SAAI,CAAC,MAAM,SAAI,CAAC,MACjD,eAAK,CAAC,OAAO,eAAK,CAAC,OAAO,eAAK,CAAC,OAChC,SAAI,CAAC,MAAM,SAAI,CAAC,OAAO,SAAI,CAAC,MAAM,SAAI,CAAC,MAAM,SAAI,CAAC,MAClD,SAAI,CAAC,MAAM,SAAI,CAAC,KAAK,MAAM,SAAI,CAAC,MAAM,SAAI,CAAC,MAAM,SAAI,CAAC,MACtD,eAAK,CAAC,MAAM,OAAO,eAAK,CAAC,MAAM,OAAO,eAAK,CAAC,MAAM,OAClD,eAAK,CAAC,KAAK,OAAO,eAAK,CAAC,MAAM,KAAK,OAAO,eAAK,CAAC,KAAK,OAAO,eAAK,CAAC,MAAM,KAAK,OAC7E,SAAI,CAAC,MAAM,SAAI,CAAC,KAAK,OAAO,SAAI,CAAC,OAAO,SAAI,CAAC,MAAM,SAAI,CAAC,MACxD,eAAK,CAAC,MAAM,OAAO,eAAK,CAAC,MAAM,OAAO,eAAK,CAAC,MAAM,OAClD,SAAI,CAAC,MAAM,SAAI,CAAC,KAAK,MAAM,SAAI,CAAC,KAAK,MAAM,SAAI,CAAC,MAAM,SAAI,CAAC,MAC3D,eAAK,CAAC,MAAM,MAAM,eAAK,CAAC,MAAM,MAAM,eAAK,CAAC,MAAM,MAChD,SAAI,CAAC,MAAM,SAAI,CAAC,MAAM,SAAI,CAAC,MAAM,SAAI,CAAC,MAAM,SAAI,CAAC,MACjD,eAAK,CAAC,OAAO,eAAK,CAAC,OAAO,eAAK,CAAC,OAChC,SAAI,CAAC,MAAM,SAAI,CAAC,MAAM,SAAI,CAAC,KAAK,MAAM,SAAI,CAAC,MAAM,SAAI,CAAC,MACtD,eAAK,CAAC,OAAO,eAAK,CAAC,OAAO,eAAK,CAAC,OAChC,SAAI,CAAC,MAAM,SAAI,CAAC,MAAM,SAAI,CAAC,MAAM,SAAI,CAAC,MAAM,SAAI,CAAC,MACjD,eAAK,CAAC,OAAO,eAAK,CAAC,OAAO,eAAK,CAAC,OAChC,SAAI,CAAC,MAAM,SAAI,CAAC,MAAM,SAAI,CAAC,MAAM,SAAI,CAAC,MAAM,SAAI,CAAC,MACjD,eAAK,CAAC,OAAO,eAAK,CAAC,OAAO,eAAK,CAAC,OAChC,SAAI,CAAC,MAAM,SAAI,CAAC,MAAM,SAAI,CAAC,MAAM,SAAI,CAAC,MAAM,SAAI,CAAC,MACjD,eAAK,CAAC,OAAO,eAAK,CAAC,OAAO,eAAK,CAAC,OAChC,SAAI,CAAC,MAAM,SAAI,CAAC,MAAM,SAAI,CAAC,MAC3B,SAAI,CAAC,MAAM,SAAI,CAAC,MAAM,SAAI,CAAC,MAAM,SAAI,CAAC,MAAM,SAAI,CAAC,MACjD,eAAK,CAAC,OAAO,eAAK,CAAC,OAAO,eAAK,CAAC,OAChC,SAAI,CAAC,MAAM,SAAI,CAAC,MAChB,SAAI,CAAC,MAE7B,SAAShC,EAAOC,GACZ,OAAOA,EAAIC,KAAKC,MAAMD,KAAKF,SAASC,EAAIG,SAGrC,ICDQ6B,EA9BK,SAAAC,GAAa,IAAD,EACQhB,qBADR,mBACrBiB,EADqB,KACTC,EADS,KA2B5B,OAxBAC,qBAAU,WACN,IAAMC,EAAc,SAAC,GAAW,IAAVC,EAAS,EAATA,IACdJ,IAAeI,IACG,IAAfA,EAAInC,QACHgC,EAAcG,GACdL,GAAYA,EAASK,IAErBL,GAAYA,EAASK,KAK3BC,EAAY,WACdJ,EAAc,OAMlB,OAHAK,OAAOC,iBAAiB,UAAWJ,GACnCG,OAAOC,iBAAiB,QAASF,GAE1B,WACHC,OAAOE,oBAAoB,UAAWL,GACtCG,OAAOE,oBAAoB,QAASH,OAGrCL,GCtBLS,G,MF0BkB,WAAiB,IAAhBtC,EAAe,uDAAP,GACzBuC,EAAerC,OAAOC,KAAKuB,GAE/B,OAAO,IAAItB,MAAMJ,GAAOK,OAAOC,KAAI,SAAAC,GAAC,OAAIb,EAAO6C,ME7B9B/B,IACjBgC,EAAiBF,EAAaG,KAAK,IACvChC,QAAQC,IAAI4B,GACZ7B,QAAQC,IAAI8B,GAEZ,IAAIE,EAAoB,EACpBC,EAAmB,GACnB7B,EAAQ,EACR8B,GAAS,EAEb,SAASC,IACLV,OAAOW,SAASC,QAAO,GA0JZC,MAvJf,WAAmB,IAAD,EACwBpC,mBAClC,IAAIR,MAAM,IAAIC,KAAK,MAAMoC,KAAK,KAFpB,mBACPQ,EADO,KACMC,EADN,OAM4BtC,mBAAS,IANrC,mBAMPuC,EANO,KAMQC,EANR,OASwBxC,mBAAS0B,EAAa,IAT9C,mBASPe,EATO,KASMC,EATN,OAY4B1C,mBAAS4B,EAAee,OAAOjB,EAAa,GAAGxC,SAZ3E,mBAYP0D,EAZO,KAYQC,EAZR,OAcoB7C,qBAdpB,mBAcP8C,EAdO,KAcIC,EAdJ,OAgBY/C,mBAAS,GAhBrB,mBAgBPC,EAhBO,KAgBA+C,EAhBA,OAiBoBhD,mBAAS,KAjB7B,mBAiBPiD,EAjBO,KAiBIC,EAjBJ,KAyHd,OAtGAnC,GAAY,SAAAM,GACR,IAAKW,EAAQ,CAMT,GALKc,GACDC,GC3CiB,IAAII,MAAOC,WD+CrB,cAAR/B,EAIC,OAHAxB,QAAQC,IAAI,mBACZoD,EAAaD,EAAUI,MAAM,GAAG,SAChCtB,EAAmBA,EAAiBsB,MAAM,GAAG,IAIjDxD,QAAQC,IAAI,cAAgBuB,GAS5B,IANA,IAAIiC,EAAuBf,EACvBgB,EAAuBX,EACvBY,EAAc1C,EAAiB2B,GAI1BgB,EAAI,EAAGA,EAAID,EAAYtE,OAAQuE,IAChCD,EAAYC,GAAGvE,OAAS4C,IACxBA,EAAoB0B,EAAYC,GAAGvE,QAQ3C,GAHAgE,EADAnB,GAAoBV,GAIhBU,EAAiB7C,OAAS4C,EAC1B,IAAK,IAAI2B,EAAI,EAAGA,EAAID,EAAYtE,OAAQuE,IAChC1B,IAAqByB,EAAYC,KACjC5D,QAAQC,IAAI,YACZkD,EAAS/C,EAAQ,GAGboC,EAAYnD,OAAS,GACrBoD,EAAeD,EAAYqB,UAAU,IAIzClB,EADAc,GAAwBb,GAKxBC,EAAehB,EAFfxB,GAAS,IAINA,IAAUwB,EAAaxC,OACtBqE,EAAuBX,EAAcc,UAAUhC,EAAaxB,GAAOhB,SAEnEW,QAAQC,IAAI,QACZkC,GAAS,EACTnC,QAAQC,IAAI,WAAakC,IAG7Ba,EAAiBU,GAGjBxB,EAAmB,GACnBD,EAAoB,QAG1B,GAAIC,EAAiB7C,SAAW4C,EAAmB,CACrD,IAAK,IAAI2B,EAAI,EAAGA,EAAID,EAAYtE,OAAQuE,IAChC1B,IAAqByB,EAAYC,KACjC5D,QAAQC,IAAI,YACZkD,EAAS/C,EAAQ,IAKrBoC,EAAYnD,OAAS,GACrBoD,EAAeD,EAAYqB,UAAU,IAIzClB,EADAc,GAAwBb,GAKxBC,EAAehB,EAFfxB,GAAS,IAINA,IAAUwB,EAAaxC,OACtBqE,EAAuBX,EAAcc,UAAUhC,EAAaxB,GAAOhB,SAEnEW,QAAQC,IAAI,QACZkC,GAAS,GAGba,EAAiBU,GAGjBxB,EAAmB,GACnBD,EAAoB,OAM5B,yBAAK3D,UAAU,OACX,4BAAQA,UAAU,cACd,yBAAKA,UAAU,eACX,yCACA,yBAAKA,UAAU,oBACX,uBAAGA,UAAU,aACb,0BAAMA,UAAU,kBACVkE,EAAcE,GAAec,OAAO,KAE1C,0BAAMlF,UAAU,qBAAqBsE,GACrC,8BAAOG,EAAcD,OAAO,EAAE,OAGlC,wBAAIxE,UAAU,wBACT8E,GAEL,wBAAI9E,UAAU,SAAd,UACY8B,GAEZ,yBAAK9B,UAAU,WACX,kBAAC,IAAD,CAAME,GAAG,IAAIC,MAAO,CAACC,eAAgB,OAAQC,MAAO,UAAU,4BAAQL,UAAU,sBAAlB,SAC9D,4BAAQA,UAAU,iBAAiB0C,QAASoB,GAA5C,gB,ME1IT0B,MAdf,WACE,OACE,kBAAC,IAAD,KACE,yBAAKvF,GAAG,aACN,kBAAC,IAAD,CAAOwF,KAAK,IAAIC,UAAW5F,EAAU6F,OAAK,IAC1C,kBAAC,IAAD,CAAOF,KAAK,YAAYC,UAAWpF,IACnC,kBAAC,IAAD,CAAOmF,KAAK,YAAYC,UAAWjF,IACnC,kBAAC,IAAD,CAAOgF,KAAK,QAAQC,UAAW9D,IAC/B,kBAAC,IAAD,CAAO6D,KAAK,UAAUC,UAAWzB,OCRrB2B,QACW,cAA7BxC,OAAOW,SAAS8B,UAEe,UAA7BzC,OAAOW,SAAS8B,UAEhBzC,OAAOW,SAAS8B,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLjF,QAAQiF,MAAMA,EAAMC,c","file":"static/js/main.2de39c8c.chunk.js","sourcesContent":["import React from 'react';\nimport { Link } from 'react-router-dom';\nimport '../css/HomePage.css';\n\nconst HomePage = () => (\n    <React.Fragment>\n        <div className=\"home-page\">\n            <h1 id=\"gameTitle\">Nihon GO</h1>\n            <p>Simple games for Japanese Learning</p>\n            <Link to=\"/gamemenu\" style={{textDecoration: 'none', color: 'black'}}><button id=\"start-button\">Let's Begin</button></Link>\n        </div>\n    </React.Fragment>\n);\n\nexport default HomePage;","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport '../css/GameMenu.css';\n\nconst GameMenu = () => (\n    <React.Fragment>\n        <div className=\"game-menu\">\n            <h2>Nihon Go</h2>\n            <ul>\n                <Link to=\"/quiz\" style={{textDecoration: 'none', color: 'black', pointerEvents: 'none'}}><li>Vocab Quiz - Coming Soon</li></Link>\n                <Link to=\"/typing\" style={{textDecoration: 'none', color: 'black'}}><li>NihonType</li></Link>\n                <Link to=\"/settings\" style={{textDecoration: 'none', color: 'black', display: 'none'}}><li>Settings</li></Link>\n                <Link to=\"/\" style={{textDecoration: 'none', color: 'black'}}><li>Home</li></Link>\n            </ul>\n        </div>\n    </React.Fragment>\n);\n\nexport default GameMenu;","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport '../css/Settings.css'\n\nconst Settings = () => (\n    <React.Fragment>\n        <h2 id=\"setting-title\">Settings</h2>\n        <Link to=\"/\" style={{textDecoration: 'none', color: 'black'}}><li>Home</li></Link>\n    </React.Fragment>\n);\n\nexport default Settings;","export const quizQuestions = {\n    \"心 (こころ)\":[[\"lungs\",\"kidney\",\"children\",\"heart (as in feelings)\"],\"heart (as in feelings)\"],\n    \"家族 (かぞく)\":[[\"sister\",\"brother\",\"family\",\"chicken\"],\"family\"],\n    \"心臓 (しんぞう)\":[[\"lungs\",\"heart\",\"mouth\",\"neck\"],\"heart\"],\n};\n\nfunction random(arr) {\n    return arr[Math.floor(Math.random()*arr.length)];\n}\n\nexport const generate = (count = 3) => {\n    let quizList = Object.keys(quizQuestions);\n\n    return new Array(count).fill().map(_ => random(quizList));\n}","import React, { useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport { generate, quizQuestions } from '../utils/quiz';\nimport '../css/Quiz.css'\n\n//Generate 100 random prompts\nconst promptList = generate();\n\nfunction shuffle(arr) {\n    return arr.sort(() => Math.random() - 0.5);\n}\n\nconsole.log(promptList);\nconsole.log(quizQuestions);\n\nfunction Quiz() {\n    const [score, setScore] = useState(0);\n    const [index, setIndex] = useState(0); \n    const [prompt, setPrompt] = useState(promptList[index]);\n    const [options, setOptions] = useState(shuffle(quizQuestions[prompt][0]));\n    const [isCorrect, setIsCorrect] = useState(false);\n\n    // console.log(\"Prompt: \" + prompt);\n    // console.log(\"Options: \" + options);\n\n    function updateQuestion() {\n        setIndex((index+1)%promptList.length)\n        let newPrompt = promptList[index];\n        setPrompt(newPrompt);\n        setOptions(quizQuestions[prompt][0]);\n        setIsCorrect(false);\n    }\n\n    function checkAnswer(option) { \n        setIndex((index+1)%promptList.length);\n        console.log(\"Index: \" + index);\n        setPrompt(promptList[index]);\n        setOptions(quizQuestions[prompt][0]);\n        setIsCorrect(false);\n        // if(option === quizQuestions[prompt][1]) {\n        //     console.log(\"正解 (せいかい), Correct!\");\n        //     setIsCorrect(true);\n        //     setScore(score + 1);\n        //     updateQuestion();\n        // }else {\n        //     console.log(\"Wrong, try again\");\n        // }\n    }\n\n    return (\n        <React.Fragment>\n            <div className=\"quiz-container\">\n                <div className=\"question-container\">\n                    <h3 id=\"quiz-question\">{isCorrect? \"正解 (せいかい), Correct!\" : \"What is the English meaning for the following Japanese words?\"}</h3>\n                    <h4 id=\"quiz-prompt\">{prompt}</h4>\n                    <div id=\"answer-buttons\">\n                        <button className=\"ans-btn\" onClick={()=>checkAnswer(options[0])} style={{\"backgroundColor\": \"deepSkyBlue\"}}>{options[0]}</button>\n                        <button className=\"ans-btn\" onClick={()=>checkAnswer(options[1])} style={{\"backgroundColor\": \"gold\"}}>{options[1]}</button>\n                        <button className=\"ans-btn\" onClick={()=>checkAnswer(options[2])} style={{\"backgroundColor\": \"tomato\"}}>{options[2]}</button>\n                        <button className=\"ans-btn\" onClick={()=>checkAnswer(options[3])} style={{\"backgroundColor\": \"#6bfa6b\"}}>{options[3]}</button>\n                    </div>\n                    <p className=\"quiz-score\">\n                        Score: {score}\n                    </p>\n                </div>\n                <div className=\"quiz-controls\">\n                    <Link to=\"/\" style={{textDecoration: 'none', color: 'black'}}><button className=\"home-button button\">Home</button></Link>\n                </div>\n            </div>\n        </React.Fragment>\n    );\n};\n\nexport default Quiz;","export const hiraganaToRomaji = {\"あ\":[\"a\"],\"い\":[\"i\",\"yi\"],\"う\":[\"u\"],\"え\":[\"e\"],\"お\":[\"o\"],\n                        \"か\":[\"ka\"],\"き\":[\"ki\"],\"く\":[\"ku\"],\"け\":[\"ke\"],\"こ\":[\"ko\"],\n                        \"きゃ\":[\"kya\"],\"きゅ\":[\"kyu\"],\"きょ\":[\"kyo\"],\n                        \"が\":[\"ga\"],\"ぎ\":[\"gi\"],\"ぐ\":[\"gu\"],\"げ\":[\"ge\"],\"ご\":[\"go\"],\n                        \"ぎゃ\":[\"gya\"],\"ぎゅ\":[\"gyu\"],\"ぎょ\":[\"gyo\"],\n                        \"さ\":[\"sa\"],\"し\":[\"shi\"],\"す\":[\"su\"],\"せ\":[\"se\"],\"そ\":[\"so\"],\n                        \"ざ\":[\"za\"],\"じ\":[\"zi\",\"ji\"],\"ず\":[\"zu\"],\"ぜ\":[\"ze\"],\"ぞ\":[\"zo\"],\n                        \"しゃ\":[\"sya\",\"sha\"],\"しゅ\":[\"syu\",\"shu\"],\"しょ\":[\"syo\",\"sho\"],\n                        \"じゃ\":[\"ja\",\"jya\"],\"じゅ\":[\"zyu\",\"ju\",\"jyu\"],\"じぇ\":[\"je\",\"jye\"],\"じょ\":[\"zyo\",\"jo\",\"jyo\"],\n                        \"た\":[\"ta\"],\"ち\":[\"ti\",\"chi\"],\"つ\":[\"tsu\"],\"て\":[\"te\"],\"と\":[\"to\"],\n                        \"ちゃ\":[\"cha\",\"cya\"],\"ちゅ\":[\"chu\",\"cyu\"],\"ちょ\":[\"cho\",\"cyo\"],\n                        \"だ\":[\"da\"],\"ぢ\":[\"di\",\"ji\"],\"づ\":[\"du\",\"zu\"],\"で\":[\"de\"],\"ど\":[\"do\"],\n                        \"ぢゃ\":[\"dya\",\"ja\"],\"ぢゅ\":[\"dyu\",\"ju\"],\"ぢょ\":[\"dyo\",\"jo\"],\n                        \"な\":[\"na\"],\"に\":[\"ni\"],\"ぬ\":[\"nu\"],\"ね\":[\"ne\"],\"の\":[\"no\"],\n                        \"にゃ\":[\"nya\"],\"にゅ\":[\"nyu\"],\"にょ\":[\"nyo\"],\n                        \"は\":[\"ha\"],\"ひ\":[\"hi\"],\"ふ\":[\"hu\",\"fu\"],\"へ\":[\"he\"],\"ほ\":[\"ho\"],\n                        \"ひゃ\":[\"hya\"],\"ひゅ\":[\"hyu\"],\"ひょ\":[\"hyo\"],\n                        \"ば\":[\"ba\"],\"び\":[\"bi\"],\"ぶ\":[\"bu\"],\"べ\":[\"be\"],\"ぼ\":[\"bo\"],\n                        \"びゃ\":[\"bya\"],\"びゅ\":[\"byu\"],\"びょ\":[\"byo\"],\n                        \"ぱ\":[\"pa\"],\"ぴ\":[\"pi\"],\"ぷ\":[\"pu\"],\"ぺ\":[\"pe\"],\"ぽ\":[\"po\"],\n                        \"ぴゃ\":[\"pya\"],\"ぴゅ\":[\"pyu\"],\"ぴょ\":[\"pyo\"],\n                        \"ま\":[\"ma\"],\"み\":[\"mi\"],\"む\":[\"mu\"],\"め\":[\"me\"],\"も\":[\"mo\"],\n                        \"みゃ\":[\"mya\"],\"みゅ\":[\"myu\"],\"みょ\":[\"myo\"],\n                        \"や\":[\"ya\"],\"ゆ\":[\"yu\"],\"よ\":[\"yo\"],\n                        \"ら\":[\"ra\"],\"り\":[\"ri\"],\"る\":[\"ru\"],\"れ\":[\"re\"],\"ろ\":[\"ro\"],\n                        \"りゃ\":[\"rya\"],\"りゅ\":[\"ryu\"],\"りょ\":[\"ryo\"],\n                        \"わ\":[\"wa\"],\"を\":[\"wo\"],\n                        \"ん\":[\"n\"]};\n\nfunction random(arr) {\n    return arr[Math.floor(Math.random()*arr.length)];\n}\n\nexport const generate = (count = 50) => {\n    let hiraganaList = Object.keys(hiraganaToRomaji);\n\n    return new Array(count).fill().map(_ => random(hiraganaList));\n}\n","import { useState, useEffect } from 'react';\n\nconst useKeyPress = callback => {\n    const [keyPressed, setKeyPressed] = useState();\n\n    useEffect(() => {\n        const downHandler = ({key}) => {\n            if (keyPressed !== key) {\n                if(key.length === 1) {\n                    setKeyPressed(key);\n                    callback && callback(key);\n                }else {\n                    callback && callback(key);\n                }\n            }\n        };\n\n        const upHandler = () => {\n            setKeyPressed(null);\n        };\n\n        window.addEventListener('keydown', downHandler);\n        window.addEventListener('keyup', upHandler);\n\n        return () => {\n            window.removeEventListener('keydown', downHandler);\n            window.removeEventListener('keyup', upHandler);\n        };\n    });\n    return keyPressed;\n}\n\nexport default useKeyPress;","import React, { useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport { generate, hiraganaToRomaji } from '../utils/typing';\nimport useKeyPress from '../hooks/useKeyPress';\nimport { currentTime } from '../utils/time';\nimport '../css/Typing.css';\n\nconst japaneseList = generate();\nlet japaneseString = japaneseList.join('');\nconsole.log(japaneseList);\nconsole.log(japaneseString);\n\nlet maxAcceptedLength = 0;\nlet romanjiContainer = \"\";\nlet index = 0;\nvar isDone = false;\n\nfunction reset() {\n    window.location.reload(false);\n}\n\nfunction Typing() {\n    const [leftPadding, setLeftPadding] = useState(\n        new Array(15).fill('  ').join(''),\n    );\n\n    //Already typed characters appearing on the left\n    const [outgoingChars, setOutgoingChars] = useState('');\n\n    //Current character to type\n    const [currentChar, setCurrentChar] = useState(japaneseList[0]);\n\n    //Incoming characters to type\n    const [incomingChars, setIncomingChars] = useState(japaneseString.substr(japaneseList[0].length));\n\n    const [startTime, setStartTime] = useState();\n    // const [wpm, setWpm] = useState(0);\n    const [score, setScore] = useState(0);\n    const [typedText, setTypedText] = useState(' ');\n\n    useKeyPress(key => {\n        if (!isDone) {\n            if (!startTime) {\n                setStartTime(currentTime());\n            }\n\n            //If key entered is backspace, then remove the last letter from textbox\n            if(key === \"Backspace\") {\n                console.log(\"It is backspace\");\n                setTypedText(typedText.slice(0,-1));\n                romanjiContainer = romanjiContainer.slice(0,-1);\n                return;\n            }\n        \n            console.log(\"typed key: \" + key);\n            // console.log(\"current char: \" + currentChar);\n        \n            let updatedOutgoingChars = outgoingChars;\n            let updatedIncomingChars = incomingChars;\n            let romanjiList = hiraganaToRomaji[currentChar];\n        \n            // console.log(\"romanjiList: \" + romanjiList);\n        \n            for (let i = 0; i < romanjiList.length; i++) {\n                if (romanjiList[i].length > maxAcceptedLength) {\n                    maxAcceptedLength = romanjiList[i].length;\n                }\n            }\n        \n            romanjiContainer += key;\n            setTypedText(romanjiContainer);\n        \n            //Used because some hiragana has multiple romanjis (ex: jya vs ja)\n            if (romanjiContainer.length < maxAcceptedLength) {\n                for (let i = 0; i < romanjiList.length; i++) {\n                    if (romanjiContainer === romanjiList[i]) {\n                        console.log(\"Correct!\")\n                        setScore(score + 1);\n                \n                        //Moving the characters\n                        if (leftPadding.length > 0) {\n                            setLeftPadding(leftPadding.substring(1));\n                        }\n                \n                        updatedOutgoingChars += currentChar;\n                        setOutgoingChars(updatedOutgoingChars);\n                \n                        index += 1;\n                \n                        setCurrentChar(japaneseList[index]);\n                \n                        if(index !== japaneseList.length) {\n                            updatedIncomingChars = incomingChars.substring(japaneseList[index].length);\n                        }else {\n                            console.log(\"Done\");\n                            isDone = true;\n                            console.log(\"isDone: \" + isDone);\n                        }\n                \n                        setIncomingChars(updatedIncomingChars); \n                \n                        //Clearing out romanjiContainer and maxAcceptedLength\n                        romanjiContainer = \"\";\n                        maxAcceptedLength = 0;\n                    }\n                }\n            }else if (romanjiContainer.length === maxAcceptedLength) {\n                for (let i = 0; i < romanjiList.length; i++) {\n                    if (romanjiContainer === romanjiList[i]) {\n                        console.log(\"Correct!\");\n                        setScore(score + 1);\n                    }\n                }\n        \n                //Moving the characters\n                if (leftPadding.length > 0) {\n                    setLeftPadding(leftPadding.substring(1));\n                }\n            \n                updatedOutgoingChars += currentChar;\n                setOutgoingChars(updatedOutgoingChars);\n            \n                index += 1;\n            \n                setCurrentChar(japaneseList[index]);\n        \n                if(index !== japaneseList.length) {\n                    updatedIncomingChars = incomingChars.substring(japaneseList[index].length);\n                }else {\n                    console.log(\"Done\");\n                    isDone = true;\n                }\n            \n                setIncomingChars(updatedIncomingChars); \n            \n                //Clearing out romanjiContainer and maxAcceptedLength\n                romanjiContainer = \"\";\n                maxAcceptedLength = 0;\n            }\n        }\n    });\n\n    return (\n        <div className=\"App\">\n            <header className=\"App-header\">\n                <div className=\"typing-game\">\n                    <h1>NihonType</h1>\n                    <div className=\"typing-container\">\n                        <p className=\"Character\">\n                        <span className=\"Character-out\">\n                            {(leftPadding + outgoingChars).slice(-11)}\n                        </span>\n                        <span className=\"Character-current\">{currentChar}</span>\n                        <span>{incomingChars.substr(0,11)}</span>\n                        </p>\n                    </div>\n                    <h3 className=\"typed-text-container\">\n                        {typedText}\n                    </h3>\n                    <h3 className=\"score\">\n                        Score: {score}\n                    </h3>\n                    <div className=\"buttons\">\n                        <Link to=\"/\" style={{textDecoration: 'none', color: 'black'}}><button className=\"home-button button\">Home</button></Link>\n                        <button className=\"restart button\" onClick={reset}>Restart</button>\n                    </div>\n                </div>\n            </header>\n        </div>\n    );\n}\n\nexport default Typing;","export const currentTime = () => new Date().getTime();","import React from 'react';\nimport {\n  BrowserRouter as Router,\n  Route,\n} from 'react-router-dom';\nimport HomePage from './pages/HomePage';\nimport GameMenu from './pages/GameMenu';\nimport Settings from './pages/Settings';\nimport Quiz from './pages/Quiz';\nimport Typing from './pages/Typing';\nimport './css/App.css';\n\nfunction App() {\n  return (\n    <Router>\n      <div id=\"page-body\">\n        <Route path=\"/\" component={HomePage} exact />\n        <Route path=\"/gamemenu\" component={GameMenu} />\n        <Route path=\"/settings\" component={Settings} />\n        <Route path=\"/quiz\" component={Quiz} />\n        <Route path=\"/typing\" component={Typing} />\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}